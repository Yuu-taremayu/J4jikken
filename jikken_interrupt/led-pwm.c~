#include "h8-3052-iodef.h"
#include "h8-3052-int.h"

#include "lcd.h"
#include "ad.h"
#include "timer.h"
#include "key.h"

/* タイマ割り込みの時間間隔[μs] */
#define TIMER0 1000

/* 割り込み処理で各処理を行う頻度を決める定数 */
#define DISPTIME 100
#define KEYTIME 1
#define ADTIME  2
#define PWMTIME 1
#define CONTROLTIME 10

/* LED関係 */
/* LEDがP9に接続されているビット位置 */
#define REDLEDPOS   0x10
#define GREENLEDPOS 0x20

/* LCD表示関連 */
/* 1段に表示できる文字数 */
#define LCDDISPSIZE 16

/* PWM制御関連 */
/* 制御周期を決める定数 */
#define MAXPWMCOUNT 10

/* A/D変換関連 */
/* A/D変換のチャネル数とバッファサイズ */
#define ADCHNUM   4
#define ADBUFSIZE 8
/* 平均化するときのデータ個数 */
#define ADAVRNUM 4
/* チャネル指定エラー時に返す値 */
#define ADCHNONE -1


/* 割り込み処理に必要な変数は大域変数にとる */
volatile int disp_time, key_time, ad_time, pwm_time, control_time;

/* LED関係 */
unsigned char redval, greenval;

/* LCD関係 */
volatile int disp_flag;
volatile char lcd_str_upper[LCDDISPSIZE+1];
volatile char lcd_str_lower[LCDDISPSIZE+1];

/* モータ制御関係 */
volatile int pwm_count;

/* A/D変換関係 */
volatile unsigned char adbuf[ADCHNUM][ADBUFSIZE];
volatile int adbufdp;

int main(void);
void int_imia0(void);
void int_adi(void);
int  ad_read(int ch);
void pwm_proc(void);
void control_proc(void);

int main(void)
{
  /* 初期化 */
  ROMEMU();           /* ROMエミュレーションをON */

  /* ここでLEDポート(P9)の初期化を行う */
  P9DDR = 0x30; /* P94, P95を出力に設定 */

  /* ここでLCDポート(P6, PA)の初期化を行う */
  P6DDR &= ~0x07;  /* P60,1,2   入力 */
  PADDR |= 0x0f;   /* PA0,1,2,3 出力 */


  /* 割り込みで使用する大域変数の初期化 */
  pwm_time = pwm_count = 0;     /* PWM制御関連 */
  disp_time = 0; disp_flag = 1; /* 表示関連 */
  key_time = 0;                 /* キー入力関連 */
  ad_time = 0;                  /* A/D変換関連 */
  control_time = 0;             /* 制御関連 */
  /* ここまで */
  adbufdp = 0;         /* A/D変換データバッファポインタの初期化 */
  lcd_init();          /* LCD表示器の初期化 */
  key_init();          /* キースキャンの初期化 */
  ad_init();           /* A/Dの初期化 */
  timer_init();        /* タイマの初期化 */
  timer_set(0,TIMER0); /* タイマ0の時間間隔をセット */
  timer_start(0);      /* タイマ0スタート */
  ENINT();             /* 全割り込み受付可 */
  redval = greenval = 0; /* 赤・緑LEDの両方を消灯とする */

  /* それぞれの値は0 <= val <= 10 とする */
  /*redval = 0;
    greenval = 0;*/

  /* ここでLCDに表示する文字列を初期化しておく */
  lcd_str_upper[0] = 'R';
  lcd_str_upper[1] = 'E';
  lcd_str_upper[2] = 'D';
  lcd_str_upper[3] = ':';
  /* 桁の違いに対応させる */
  if (redval == 10) {
    lcd_str_upper[4] = '1';
    lcd_str_upper[5] = '0';
    lcd_str_upper[6] = '\0';
  }
  else {
    lcd_str_upper[4] = redval + '0';
    lcd_str_upper[5] = '\0';
    lcd_str_upper[6] = '\0';
  }

  
  lcd_str_lower[0] = 'G';
  lcd_str_lower[1] = 'R';
  lcd_str_lower[2] = 'E';
  lcd_str_lower[3] = 'E';
  lcd_str_lower[4] = 'N';
  lcd_str_lower[5] = ':';
  /* 桁の違いに対応させる */
  if (greenval == 10) {
    lcd_str_lower[6] = '1';
    lcd_str_lower[7] = '0';
    lcd_str_lower[8] = '\0';
  }
  else {
    lcd_str_lower[6] = greenval + '0';
    lcd_str_lower[7] = '\0';
    lcd_str_lower[8] = '\0';
  }
  
  lcd_clear();

  while (1){ /* 普段はこのループを実行している */

    /* ここで disp_flag によってLCDの表示を更新する */
    if (disp_flag == 1) {
      lcd_cursor(0, 0);
      lcd_printstr(lcd_str_upper);
      lcd_cursor(0, 1);
      lcd_printstr(lcd_str_lower);
      
      disp_flag = 0;
    }

    /* その他の処理はタイマ割り込みによって自動的に実行されるため  */
    /* タイマ 0 の割り込みハンドラ内から各処理関数を呼び出すことが必要 */
  }
}

#pragma interrupt
void int_imia0(void)
     /* タイマ0(GRA) の割り込みハンドラ　　　　　　　　　　　　　　　 */
     /* 関数の名前はリンカスクリプトで固定している                   */
     /* 関数の直前に割り込みハンドラ指定の #pragama interrupt が必要 */
     /* タイマ割り込みによって各処理の呼出しが行われる               */
     /*   呼出しの頻度は KEYTIME,ADTIME,PWMTIME,CONTROLTIME で決まる */
     /* 全ての処理が終わるまで割り込みはマスクされる                 */
     /* 各処理は基本的に割り込み周期内で終わらなければならない       */
{
  /* LCD表示の処理 */
  /* 他の処理を書くときの参考 */
  disp_time++;
  if (disp_time >= DISPTIME) {
    disp_flag = 1;
    disp_time = 0;
  }

  /* ここにキー処理に分岐するための処理を書く */
  /* キー処理の中身は全て key.c にある */
  key_time++;
  if (key_time >= KEYTIME) {
    key_sense();
    key_time = 0;
  }

  /* ここにPWM処理に分岐するための処理を書く */
  /* タイマ割り込みごとにpwm_timeを+1する */
  /* pwm_timeがPWMTIMEに等しくなったらpwm制御関数を呼び出し，pwm_timeをリセットする */
  pwm_time++;
  if (pwm_time >= PWMTIME) {
    pwm_proc();
    pwm_time = 0;
  }

  /* ここにA/D変換開始の処理を直接書く */
  /* A/D変換の初期化・スタート・ストップの処理関数は ad.c にある */
  ad_time++;
  if (ad_time >= ADTIME) {
    ad_scan(0, 1);
    ad_time = 0;
  }

  /* ここに制御処理に分岐するための処理を書く */
  control_time++;
  if (control_time >= CONTROLTIME) {
    control_proc();
    control_time = 0;
  }

  timer_intflag_reset(0); /* 割り込みフラグをクリア */
  ENINT();                /* CPUを割り込み許可状態に */
}

#pragma interrupt
void int_adi(void)
     /* A/D変換終了の割り込みハンドラ                               */
     /* 関数の名前はリンカスクリプトで固定している                   */
     /* 関数の直前に割り込みハンドラ指定の #pragma interrupt が必要  */
{
  ad_stop();    /* A/D変換の停止と変換終了フラグのクリア */

  /* ここでバッファポインタの更新を行う */
  /* 　但し、バッファの境界に注意して更新すること */
  adbufdp = (adbufdp + 1) % ADBUFSIZE;

  /* ここでバッファにA/Dの各チャネルの変換データを入れる */
  /* スキャングループ 0 を指定した場合は */
  /*   A/D ch0〜3 (信号線ではAN0〜3)の値が ADDRAH〜ADDRDH に格納される */
  /* スキャングループ 1 を指定した場合は */
  /*   A/D ch4〜7 (信号線ではAN4〜7)の値が ADDRAH〜ADDRDH に格納される */
  adbuf[0][adbufdp] = ADDRAH;
  adbuf[1][adbufdp] = ADDRBH;
  adbuf[2][adbufdp] = ADDRCH;
  adbuf[3][adbufdp] = ADDRDH;

  ENINT();      /* 割り込みの許可 */
}

int ad_read(int ch)
     /* A/Dチャネル番号を引数で与えると, 指定チャネルの平均化した値を返す関数 */
     /* チャネル番号は，0〜ADCHNUM の範囲 　　　　　　　　　　　             */
     /* 戻り値は, 指定チャネルの平均化した値 (チャネル指定エラー時はADCHNONE) */
{
  int i,ad,bp;

  if ((ch > ADCHNUM) || (ch < 0)) ad = ADCHNONE; /* チャネル範囲のチェック */
  else {

    /* ここで指定チャネルのデータをバッファからADAVRNUM個取り出して平均する */
    /* データを取り出すときに、バッファの境界に注意すること */
    /* 平均した値が戻り値となる */
    ad = 0;
    bp = adbufdp - ADAVRNUM;
    if (bp < 0) bp += ADBUFSIZE;
    for (i = 0; i < ADAVRNUM; i++) {
      ad += (int)adbuf[ch][(bp + i) % ADBUFSIZE];
    }
    ad /= ADAVRNUM;

  }
  return ad; /* データの平均値を返す */
}

void pwm_proc(void)
     /* PWM制御を行う関数                                        */
     /* この関数はタイマ割り込み0の割り込みハンドラから呼び出される */
{

  /* ここにPWM制御の中身を書く */

  /* それぞれのval / MAXPWMCOUNTがデューティ比となる */
  /* 赤色LEDの処理 */
  if (pwm_count < redval) {
    P9DR &= ~REDLEDPOS;
  }
  else {
    P9DR |= REDLEDPOS;
  }

   /* 緑色LEDの処理 */
  if (pwm_count < greenval) {
    P9DR &= ~GREENLEDPOS;
  }
  else {
    P9DR |= GREENLEDPOS;
  }
  /* カウント数を更新し，MAXPWMCOUNTに等しくなったらリセットする */
  pwm_count++;
  if (pwm_count >= MAXPWMCOUNT) {
    pwm_count = 0;
  }
}

void control_proc(void)
     /* 制御を行う関数                                           */
     /* この関数はタイマ割り込み0の割り込みハンドラから呼び出される */
{
  
  /* ここに制御処理を書く */

  /*if (key_read(2) == KEYPOSEDGE) {
    if (redval < 10) {
      redval++;
    }
  }

  if (key_read(5) == KEYPOSEDGE) {
    if (redval > 0) {
      redval--;
    }
  }

  if (key_read(3) == KEYPOSEDGE) {
    if (greenval < 10) {
      greenval++;
    }
  }

  if (key_read(6) == KEYPOSEDGE) {
    if (greenval > 0) {
      greenval--;
    }
  }

  //桁の違いに対応させる 
  if (redval == 10) {
    lcd_str_upper[4] = '1';
    lcd_str_upper[5] = '0';
    lcd_str_upper[6] = '\0';
  }
  else {
    lcd_str_upper[4] = redval + '0';
    lcd_str_upper[5] = ' ';
    lcd_str_upper[6] = '\0';
  }
  
  if (greenval == 10) {
    lcd_str_lower[6] = '1';
    lcd_str_lower[7] = '0';
    lcd_str_lower[8] = '\0';
  }
  else {
    lcd_str_lower[6] = greenval + '0';
    lcd_str_lower[7] = ' ';
    lcd_str_lower[8] = '\0';
  }*/
  
  redval = ad_read(1);

  if (tmp == 0) lcd_str_upper[4] = ' ';
  else lcd_str_upper[4] = redval / 100 + '0';

  if (tmp == 0 && lcd_str_upper[4] == ' ') lcd_str_upper[5] = ' ';
  else lcd_str_upper[5] = (redval / 10) % 10 + '0';

  lcd_str_upper[6] = (redval / 10) / 10 + '0';
  lcd_str_upper[7] = '\0';

  
  greenval = ad_read(2);

  if (tmp == 0) lcd_str_lower[6] = ' ';
  else lcd_str_lower[6] = greenval / 100 + '0';
  
  if (tmp == 0 && lcd_str_lower[6] == ' ') lcd_str_lower[7] = ' ';
  else lcd_str_lower[7] = (greenval / 10) % 10 + '0';

  lcd_str_lower[8] = (greenval / 10) / 10 + '0';
  lcd_str_lower[9] = '\0';
}
